
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hrhulkdjzqyliwektgxe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhyaHVsa2RqenF5bGl3ZWt0Z3hlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NjQ1NDQsImV4cCI6MjA2MTQ0MDU0NH0.sAxSA4FvQqWTnFzq2kxCr8YJHY9ndkRB18VEDyZuFVs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// Initialize the applications storage bucket on client load
(async () => {
  try {
    // First check if bucket exists
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('Error listing buckets:', error);
      return;
    }
    
    const applicationsBucketExists = buckets?.some(bucket => bucket.name === 'applications');
    
    if (!applicationsBucketExists) {
      // Create the bucket with public access
      const { error: createError } = await supabase.storage.createBucket('applications', {
        public: true,
        fileSizeLimit: 5242880, // 5MB in bytes
      });
      
      if (createError) {
        console.error('Error creating applications bucket:', createError);
        return;
      }
      
      console.log('Created applications storage bucket');
      
      // Set public policy for the bucket to allow uploads without authentication
      const { error: policyError } = await supabase.storage.from('applications').createSignedUploadUrl('test-policy-file');
      if (policyError) {
        console.error('Error setting bucket policy:', policyError);
      } else {
        console.log('Successfully set public access policy for applications bucket');
      }
    }
  } catch (error) {
    console.error('Error initializing storage bucket:', error);
  }
})();
