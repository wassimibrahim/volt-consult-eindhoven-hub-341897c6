// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hrhulkdjzqyliwektgxe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhyaHVsa2RqenF5bGl3ZWt0Z3hlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NjQ1NDQsImV4cCI6MjA2MTQ0MDU0NH0.sAxSA4FvQqWTnFzq2kxCr8YJHY9ndkRB18VEDyZuFVs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// Maximum retries for bucket operations
const MAX_RETRIES = 5;
const RETRY_DELAY_BASE = 1000; // Base delay in ms

/**
 * Improved function to check if applications bucket exists
 * This function will try to create the bucket if it doesn't exist
 */
export const createApplicationsBucketIfNotExists = async (retryCount = 0): Promise<boolean> => {
  try {
    console.log(`Checking if applications bucket exists (attempt ${retryCount + 1}/${MAX_RETRIES + 1})`);
    
    // First check if we can list the bucket
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('Error listing buckets:', bucketsError);
      
      // Use exponential backoff for retries
      if (retryCount < MAX_RETRIES) {
        const delay = RETRY_DELAY_BASE * Math.pow(2, retryCount);
        console.log(`Retrying in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        return createApplicationsBucketIfNotExists(retryCount + 1);
      }
      
      return false;
    }
    
    // Check if applications bucket exists in the list
    const applicationsBucketExists = buckets?.some(bucket => bucket.name === 'applications');
    console.log('Applications bucket exists in list:', applicationsBucketExists);
    
    if (!applicationsBucketExists) {
      // Try to create the bucket
      console.log('Attempting to create applications bucket...');
      const { error: createError } = await supabase.storage.createBucket('applications', {
        public: true,
        fileSizeLimit: 10485760 // 10MB
      });
      
      if (createError) {
        console.error('Error creating applications bucket:', createError);
        // Fix: Use message content instead of code property for error checking
        // StorageError type doesn't have a 'code' property
        if (createError.message?.includes('400') || createError.message?.includes('already exists')) {
          console.log('Bucket might already exist. Attempting to access it...');
          return checkApplicationsBucketAccess();
        }
        return false;
      }
      
      console.log('Applications bucket created successfully');
      return true;
    }
    
    // If bucket exists, check if we can access it
    return checkApplicationsBucketAccess();
    
  } catch (error) {
    console.error('Unhandled error checking applications bucket:', error);
    
    // Use exponential backoff for retries
    if (retryCount < MAX_RETRIES) {
      const delay = RETRY_DELAY_BASE * Math.pow(2, retryCount);
      console.log(`Retrying after error in ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      return createApplicationsBucketIfNotExists(retryCount + 1);
    }
    
    return false;
  }
};

/**
 * Helper function to verify bucket access by trying to list files
 */
const checkApplicationsBucketAccess = async (retryCount = 0): Promise<boolean> => {
  try {
    // Test if we can list files in the bucket
    const { data: files, error: filesError } = await supabase.storage
      .from('applications')
      .list();
      
    if (filesError) {
      console.error('Error accessing applications bucket:', filesError);
      
      // Use exponential backoff for retries
      if (retryCount < MAX_RETRIES) {
        const delay = RETRY_DELAY_BASE * Math.pow(2, retryCount);
        console.log(`Retrying bucket access check in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        return checkApplicationsBucketAccess(retryCount + 1);
      }
      
      return false;
    }
    
    console.log('Successfully accessed applications bucket');
    return true;
  } catch (error) {
    console.error('Unhandled error checking bucket access:', error);
    
    // Use exponential backoff for retries
    if (retryCount < MAX_RETRIES) {
      const delay = RETRY_DELAY_BASE * Math.pow(2, retryCount);
      console.log(`Retrying bucket access after error in ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      return checkApplicationsBucketAccess(retryCount + 1);
    }
    
    return false;
  }
};

// Function to check if the applications bucket exists with retry mechanism
export const checkApplicationsBucket = async (retryCount = 0): Promise<boolean> => {
  try {
    console.log(`Checking if applications bucket is accessible (attempt ${retryCount + 1}/${MAX_RETRIES + 1})`);
    return await checkApplicationsBucketAccess(retryCount);
  } catch (error) {
    console.error('Error in checkApplicationsBucket:', error);
    
    // Use exponential backoff for retries
    if (retryCount < MAX_RETRIES) {
      const delay = RETRY_DELAY_BASE * Math.pow(2, retryCount);
      console.log(`Retrying after error in ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      return checkApplicationsBucket(retryCount + 1);
    }
    
    return false;
  }
};

// User roles management
export type UserRole = 'user' | 'admin';

export const getUserRole = async (): Promise<UserRole> => {
  try {
    // Check if the user is logged in
    const { data: sessionData } = await supabase.auth.getSession();
    if (!sessionData.session) {
      console.log('No active session, defaulting to user role');
      return 'user';
    }
    
    // Admin check based on specific email domains or predefined admin users
    const userEmail = sessionData.session.user.email;
    
    if (userEmail) {
      // Admin check based on email
      if (userEmail.includes('admin@') || userEmail.endsWith('@vcgeindhoven.nl')) {
        console.log('Admin role assigned based on email');
        return 'admin';
      }
      
      // Check if the user is an admin based on predefined admin credentials in AdminAuth.tsx
      // (This is a fallback mechanism)
      if (userEmail === 'W@example.com') {
        console.log('Admin role assigned based on predefined credentials');
        return 'admin';
      }
    }
    
    // Default role
    return 'user';
    
  } catch (error) {
    console.error('Error determining user role:', error);
    return 'user'; // Default to regular user on error
  }
};

// Initialize bucket on application startup
createApplicationsBucketIfNotExists()
  .then(success => {
    if (success) {
      console.log('Applications bucket is ready for use');
    } else {
      console.error('Failed to ensure applications bucket exists. File uploads may not work.');
    }
  })
  .catch(error => {
    console.error('Error during bucket initialization:', error);
  });
