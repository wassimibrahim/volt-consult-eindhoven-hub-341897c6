
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hrhulkdjzqyliwektgxe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhyaHVsa2RqenF5bGl3ZWt0Z3hlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NjQ1NDQsImV4cCI6MjA2MTQ0MDU0NH0.sAxSA4FvQqWTnFzq2kxCr8YJHY9ndkRB18VEDyZuFVs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// We need to ensure the bucket exists before any application submission
export const ensureApplicationsBucketExists = async (): Promise<boolean> => {
  try {
    console.log('Checking if applications bucket exists');
    
    // First, check if the bucket already exists
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('Error listing buckets:', bucketsError);
      return false;
    }
    
    console.log('Available buckets:', buckets);
    
    // Check if applications bucket exists
    const applicationsBucketExists = buckets?.some(bucket => bucket.name === 'applications');
    console.log('Applications bucket exists:', applicationsBucketExists);
    
    if (!applicationsBucketExists) {
      console.log('Creating applications bucket');
      // Create the applications bucket
      const { error: createError } = await supabase.storage.createBucket('applications', {
        public: true,
        fileSizeLimit: 10485760, // 10MB
        allowedMimeTypes: ['application/pdf']
      });
      
      if (createError) {
        console.error('Error creating applications bucket:', createError);
        return false;
      }
      
      console.log('Created applications bucket successfully');
    } else {
      console.log('Applications bucket already exists, updating settings');
      
      // Update the bucket to ensure settings are correct
      const { error: updateError } = await supabase.storage.updateBucket('applications', {
        public: true,
        fileSizeLimit: 10485760, // 10MB
        allowedMimeTypes: ['application/pdf']
      });
      
      if (updateError) {
        console.error('Error updating applications bucket settings:', updateError);
        // Even if update fails, the bucket exists
      } else {
        console.log('Updated applications bucket settings successfully');
      }
    }
    
    return true;
  } catch (error) {
    console.error('Unhandled error in bucket initialization:', error);
    return false;
  }
};

// Initialize the bucket immediately when this file is imported
ensureApplicationsBucketExists().then(success => {
  if (success) {
    console.log('Applications bucket initialization completed successfully');
  } else {
    console.error('Failed to initialize applications bucket');
  }
});
