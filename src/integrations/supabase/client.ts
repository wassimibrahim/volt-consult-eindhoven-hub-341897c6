
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hrhulkdjzqyliwektgxe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhyaHVsa2RqenF5bGl3ZWt0Z3hlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NjQ1NDQsImV4cCI6MjA2MTQ0MDU0NH0.sAxSA4FvQqWTnFzq2kxCr8YJHY9ndkRB18VEDyZuFVs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// Initialize the applications storage bucket on client load
(async () => {
  try {
    console.log('Initializing storage bucket');
    // First check if bucket exists
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('Error listing buckets:', error);
      return;
    }
    
    console.log('Available buckets:', buckets);
    const applicationsBucketExists = buckets?.some(bucket => bucket.name === 'applications');
    console.log('Applications bucket exists:', applicationsBucketExists);
    
    if (!applicationsBucketExists) {
      console.log('Creating applications bucket');
      // Create the bucket with public access
      const { error: createError } = await supabase.storage.createBucket('applications', {
        public: true,
        fileSizeLimit: 10485760, // 10MB in bytes
        allowedMimeTypes: ['application/pdf'] // Only allow PDF files
      });
      
      if (createError) {
        console.error('Error creating applications bucket:', createError);
      } else {
        console.log('Created applications storage bucket');
        
        // Set bucket to public for easier access to files
        const { error: updateError } = await supabase.storage.updateBucket('applications', {
          public: true
        });
        
        if (updateError) {
          console.error('Error setting bucket to public:', updateError);
        } else {
          console.log('Successfully set bucket to public');
        }
      }
    } else {
      console.log('Applications bucket already exists');
      
      // Update bucket settings to ensure it's public and has the right file size limit
      const { error: updateError } = await supabase.storage.updateBucket('applications', {
        public: true,
        fileSizeLimit: 10485760, // 10MB in bytes
        allowedMimeTypes: ['application/pdf']
      });
      
      if (updateError) {
        console.error('Error updating bucket settings:', updateError);
      } else {
        console.log('Updated applications bucket settings');
      }
    }
  } catch (error) {
    console.error('Error initializing storage bucket:', error);
  }
})();
