
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hrhulkdjzqyliwektgxe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhyaHVsa2RqenF5bGl3ZWt0Z3hlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NjQ1NDQsImV4cCI6MjA2MTQ0MDU0NH0.sAxSA4FvQqWTnFzq2kxCr8YJHY9ndkRB18VEDyZuFVs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// Function to check if the applications bucket exists and is accessible
// Rather than trying to create it (which requires admin privileges), 
// we now just check if it exists and is accessible
export const checkApplicationsBucket = async (): Promise<boolean> => {
  try {
    console.log('Checking if applications bucket is accessible');
    
    // First check if we can list the bucket
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('Error listing buckets:', bucketsError);
      return false;
    }
    
    // Check if applications bucket exists in the list
    const applicationsBucketExists = buckets?.some(bucket => bucket.name === 'applications');
    console.log('Applications bucket exists in list:', applicationsBucketExists);
    
    if (!applicationsBucketExists) {
      console.error('Applications bucket does not exist');
      return false;
    }
    
    // Attempt to list files in the bucket to verify permissions
    const { data: files, error: filesError } = await supabase.storage
      .from('applications')
      .list();
      
    if (filesError) {
      console.error('Error accessing applications bucket:', filesError);
      return false;
    }
    
    console.log('Successfully accessed applications bucket');
    return true;
  } catch (error) {
    console.error('Unhandled error checking applications bucket:', error);
    return false;
  }
};
