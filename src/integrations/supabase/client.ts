
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hrhulkdjzqyliwektgxe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhyaHVsa2RqenF5bGl3ZWt0Z3hlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NjQ1NDQsImV4cCI6MjA2MTQ0MDU0NH0.sAxSA4FvQqWTnFzq2kxCr8YJHY9ndkRB18VEDyZuFVs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// User roles management
export type UserRole = 'user' | 'admin';

export const getUserRole = async (): Promise<UserRole> => {
  try {
    // Check if the user is logged in
    const { data: sessionData } = await supabase.auth.getSession();
    if (!sessionData.session) {
      console.log('No active session, defaulting to user role');
      return 'user';
    }
    
    // Admin check based on specific email domains or predefined admin users
    const userEmail = sessionData.session.user.email;
    
    if (userEmail) {
      // Admin check based on email
      if (userEmail.includes('admin@') || userEmail.endsWith('@vcgeindhoven.nl')) {
        console.log('Admin role assigned based on email');
        return 'admin';
      }
      
      // Check if the user is an admin based on predefined admin credentials in AdminAuth.tsx
      // (This is a fallback mechanism)
      if (userEmail === 'W@example.com') {
        console.log('Admin role assigned based on predefined credentials');
        return 'admin';
      }
    }
    
    // Default role
    return 'user';
    
  } catch (error) {
    console.error('Error determining user role:', error);
    return 'user'; // Default to regular user on error
  }
};
